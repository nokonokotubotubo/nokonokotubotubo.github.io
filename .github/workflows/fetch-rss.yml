name: Fetch RSS Feeds and Deploy
on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  fetch-rss:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { token: ${{ secrets.GITHUB_TOKEN }} }

    - name: Create RSS directory
      run: mkdir -p rss && echo "‚úÖ rss „Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê"

    - name: Fetch Qiita RSS
      uses: Promptly-Technologies-LLC/rss-fetch-action@v2
      with: { feed_url: 'https://qiita.com/tags/%E7%94%9F%E6%88%90ai/feed', file_path: './temp-qiita.json' }

    - name: Fetch Zenn RSS
      uses: Promptly-Technologies-LLC/rss-fetch-action@v2
      with: { feed_url: 'https://zenn.dev/topics/%E7%94%9F%E6%88%90ai/feed', file_path: './temp-zenn.json' }

    - name: Fetch CNET RSS
      uses: Promptly-Technologies-LLC/rss-fetch-action@v2
      with: { feed_url: 'http://feeds.japan.cnet.com/cnet/rss', file_path: './temp-cnet.json' }

    - name: Merge & Generate JSON
      run: |
        node <<'EOF'
        const fs=require('fs');
        const feeds=[
          {name:'Qiita',file:'./temp-qiita.json',color:'#55C500',desc:'Qiita ÁîüÊàêAI'},
          {name:'Zenn', file:'./temp-zenn.json', color:'#3EA8FF',desc:'Zenn ÁîüÊàêAI'},
          {name:'CNET', file:'./temp-cnet.json', color:'#C41E3A',desc:'CNET Japan'}
        ];
        let all=[], meta=[];
        feeds.forEach(f=>{
          if(!fs.existsSync(f.file)){console.log('‚ùå missing',f.file);return;}
          const d=JSON.parse(fs.readFileSync(f.file,'utf8'));
          const ent=(d.entries||[]).slice(0,5).map(e=>({
            ...e,
            source:f.name, sourceColor:f.color, sourceFeed:f.name.toLowerCase(),
            published:e.published||e.pubDate||new Date().toISOString(),
            summary:(e.description||e.summary||'').replace(/<[^>]*>/g,'').slice(0,150),
            thumbnail:extractThumbnail(e)
          }));
          all=all.concat(ent);
          meta.push({name:f.name,color:f.color,description:f.desc,count:ent.length});
        });

        /* ---- extractThumbnail (401 ÂØæÁ≠ñÁâà) ---- */
        function extractThumbnail(e){
          let u=null;
          if(e.thumbnail)u=typeof e.thumbnail==='string'?e.thumbnail:e.thumbnail.url;
          if(!u && e.enclosures?.length){
            const enc=e.enclosures.find(v=>v.type?.startsWith('image/')&&(v.url||v.href));
            if(enc)u=enc.url||enc.href;
          }
          if(!u && e['media:content']){
            const arr=Array.isArray(e['media:content'])?e['media:content']:[e['media:content']];
            for(const m of arr){if(m.url&&(m.medium==='image'||m.type?.startsWith('image/'))){u=m.url;break}}
          }
          if(!u && e['media:thumbnail'])u=typeof e['media:thumbnail']==='string'?e['media:thumbnail']:e['media:thumbnail'].url;
          if(!u && e.description){
            const m=e.description.match(/<img[^>]+src=["']([^"']+)["']/i);if(m)u=m[1];
          }
          if(!u && e.content){
            const txt=typeof e.content==='object'?(e.content.value||e.content['#text']||''):e.content;
            const m=txt.match(/<img[^>]+src=["']([^"']+)["']/i);if(m)u=m[1];
          }
          if(u){
            try{
              const url=new URL(u);
              if(url.protocol!=='https:')return null;
              const ng=['ogp.png','/admin/','/private/','/protected/','basic-auth','unauthorized'];
              if(ng.some(p=>u.toLowerCase().includes(p)))return null;
              return u;
            }catch{ return null;}
          }
          return null;
        }

        all.sort((a,b)=>new Date(b.published)-new Date(a.published));
        all=all.slice(0,15);
        fs.writeFileSync('./rss/feeds.json',JSON.stringify({
          title:'RSS Reader - ÁîüÊàêAI„Éï„Ç£„Éº„Éâ',
          description:'ÊúÄÊñ∞„ÅÆÁîüÊàêAIÈñ¢ÈÄ£Ë®ò‰∫ã',
          updated:new Date().toISOString(),
          totalEntries:all.length,
          feeds:meta,
          entries:all
        },null,2));
        feeds.forEach(f=>fs.existsSync(f.file)&&fs.unlinkSync(f.file));
        EOF

    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: 'ü§ñ RSS feeds updated'
        file_pattern: 'rss/feeds.json'
        commit_user_name: RSS Bot
        commit_user_email: rss-bot@github-actions.local
      env: { GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} }

  deploy:
    needs: fetch-rss
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - uses: actions/checkout@v4
      with: { ref: main }
    - uses: actions/configure-pages@v5
    - uses: actions/upload-pages-artifact@v3
      with: { path: './' }
    - id: deployment
      uses: actions/deploy-pages@v4
    - name: Show URL
      run: echo "üöÄ ${{ steps.deployment.outputs.page_url }}"
