# .github/workflows/rss-fetcher.yml (404エラー対応版)
name: RSS Feed Fetcher

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  fetch-rss:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create data directory
      run: mkdir -p data

    # 検索結果[1][2]に基づく修正版
    - name: Fetch Tech News RSS (with User-Agent)
      uses: Promptly-Technologies-LLC/rss-fetch-action@v2
      with:
        feed_url: 'https://feeds.feedburner.com/oreilly/radar'
        file_path: './data/tech-news.json'
        fetch_options: '{"headers": {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}}'
        parser_options: '{"useISODateFormat": false}'
        remove_published: true

    # 動作確認済みRSSフィード（404エラー回避）
    - name: Fetch NHK News RSS
      uses: Promptly-Technologies-LLC/rss-fetch-action@v2
      with:
        feed_url: 'https://www3.nhk.or.jp/rss/news/cat0.xml'
        file_path: './data/nhk-news.json'
        fetch_options: '{"headers": {"User-Agent": "Mozilla/5.0 (compatible; RSS Reader Bot)"}}'

    # GIGAZINE（安定したフィード）
    - name: Fetch GIGAZINE RSS
      uses: Promptly-Technologies-LLC/rss-fetch-action@v2
      with:
        feed_url: 'https://gigazine.net/news/rss_2.0/'
        file_path: './data/gigazine.json'
        fetch_options: '{"headers": {"User-Agent": "Mozilla/5.0 (compatible; RSS Reader Bot)"}}'

    # エラーハンドリング付きのITmedia（代替URL）
    - name: Fetch IT Media RSS (with fallback)
      uses: Promptly-Technologies-LLC/rss-fetch-action@v2
      with:
        feed_url: 'https://rss.itmedia.co.jp/rss/2.0/topstory.xml'  # より安定したURL
        file_path: './data/it-media.json'
        fetch_options: '{"headers": {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"}}'
      continue-on-error: true  # エラーがあっても処理を続行

    # フィードURLの事前検証
    - name: Validate RSS URLs
      run: |
        echo "📡 RSSフィードURLの検証..."
        
        urls=(
          "https://feeds.feedburner.com/oreilly/radar"
          "https://www3.nhk.or.jp/rss/news/cat0.xml"
          "https://gigazine.net/news/rss_2.0/"
          "https://rss.itmedia.co.jp/rss/2.0/topstory.xml"
        )
        
        for url in "${urls[@]}"; do
          echo "検証中: $url"
          
          # User-Agent付きでリクエスト[2]
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "User-Agent: Mozilla/5.0 (compatible; RSS Reader Bot)" \
            "$url")
          
          if [ "$response" = "200" ]; then
            echo "✅ $url: アクセス可能 (HTTP $response)"
          else
            echo "❌ $url: アクセス不可 (HTTP $response)"
          fi
        done

    # メタデータ生成（成功したフィードのみ）
    - name: Generate feed metadata
      run: |
        cat > data/feeds-meta.json << 'EOF'
        {
          "lastUpdated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "feeds": []
        }
        EOF
        
        # 実際に生成されたJSONファイルを確認してメタデータに追加
        feeds_array="["
        first=true
        
        if [ -f "data/tech-news.json" ]; then
          [ "$first" = false ] && feeds_array+=","
          feeds_array+='{
            "id": "tech-news",
            "name": "Tech News", 
            "description": "O'\''Reilly Radar",
            "file": "tech-news.json",
            "color": "#FF6B35"
          }'
          first=false
        fi
        
        if [ -f "data/nhk-news.json" ]; then
          [ "$first" = false ] && feeds_array+=","
          feeds_array+='{
            "id": "nhk-news",
            "name": "NHKニュース",
            "description": "NHK 主要ニュース", 
            "file": "nhk-news.json",
            "color": "#2E7D32"
          }'
          first=false
        fi
        
        if [ -f "data/gigazine.json" ]; then
          [ "$first" = false ] && feeds_array+=","
          feeds_array+='{
            "id": "gigazine",
            "name": "GIGAZINE",
            "description": "GIGAZINE テック記事",
            "file": "gigazine.json", 
            "color": "#FF4081"
          }'
          first=false
        fi
        
        if [ -f "data/it-media.json" ]; then
          [ "$first" = false ] && feeds_array+=","
          feeds_array+='{
            "id": "it-media",
            "name": "ITメディア",
            "description": "ITmedia ニュース",
            "file": "it-media.json",
            "color": "#4A90E2"
          }'
          first=false
        fi
        
        feeds_array+="]"
        
        # メタデータファイルを更新
        jq --argjson feeds "$feeds_array" \
           --arg updated "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
           '.feeds = $feeds | .lastUpdated = $updated' \
           data/feeds-meta.json > data/feeds-meta-tmp.json
        
        mv data/feeds-meta-tmp.json data/feeds-meta.json

    # 詳細な検証とログ出力
    - name: Validate and Report
      run: |
        echo "=== RSS取得結果レポート ==="
        success_count=0
        error_count=0
        
        for file in data/*.json; do
          if [ -f "$file" ] && [ "$(basename "$file")" != "feeds-meta.json" ]; then
            if jq empty "$file" 2>/dev/null; then
              entries=$(jq '.entries | length' "$file" 2>/dev/null || echo "0")
              title=$(jq -r '.title // "Unknown"' "$file" 2>/dev/null)
              echo "✅ $(basename "$file"): ${entries}件 - ${title}"
              ((success_count++))
            else
              echo "❌ $(basename "$file"): JSON解析エラー"
              ((error_count++))
            fi
          fi
        done
        
        echo ""
        echo "📊 取得結果サマリー:"
        echo "   成功: ${success_count}フィード"
        echo "   エラー: ${error_count}フィード"
        
        if [ $success_count -gt 0 ]; then
          echo "✅ 少なくとも1つのフィードが正常に取得されました"
        else
          echo "❌ 全てのフィードの取得に失敗しました"
          exit 1
        fi

    # 変更をコミット
    - name: Commit and push RSS data
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: 'RSS feeds updated - $(date -u +"%Y-%m-%d %H:%M UTC")'
        file_pattern: 'data/*.json'
