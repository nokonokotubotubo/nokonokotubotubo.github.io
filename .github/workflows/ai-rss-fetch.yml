    # ✅ 修正：StaticCrypt詳細デバッグ版
    - name: Encrypt with StaticCrypt (Debug Enhanced)
      run: |
        if [ -f ai-rss-temp/dashboard.html ]; then
          echo "🔒 StaticCrypt暗号化開始"
          
          # StaticCryptインストール
          npm install -g staticrypt
          echo "📦 StaticCrypt バージョン: $(staticrypt --version)"
          
          # パスワード長チェック
          PASSWORD_LENGTH=${#STATICCRYPT_PASSWORD}
          echo "📏 パスワード長: $PASSWORD_LENGTH 文字"
          
          # 入力ファイル詳細確認
          echo "📄 入力ファイル詳細:"
          ls -la ai-rss-temp/dashboard.html
          echo "📊 入力ファイルサイズ: $(wc -c < ai-rss-temp/dashboard.html) bytes"
          echo "📝 入力ファイル先頭確認:"
          head -c 100 ai-rss-temp/dashboard.html
          echo ""
          
          # 出力ディレクトリ詳細確認
          echo "📁 出力ディレクトリ詳細:"
          ls -la ai-rss/
          echo "📍 出力ディレクトリ権限:"
          ls -ld ai-rss/
          echo "📍 カレントディレクトリ:"
          pwd
          
          # 絶対パスでの確認
          echo "📍 絶対パス確認:"
          echo "入力: $(realpath ai-rss-temp/dashboard.html)"
          echo "出力: $(realpath ai-rss/)/index.html"
          
          # パスワード長による実行方法の選択
          if [ $PASSWORD_LENGTH -lt 8 ]; then
            echo "❌ エラー: パスワードは8文字以上である必要があります"
            exit 1
          elif [ $PASSWORD_LENGTH -lt 14 ]; then
            echo "⚠️ パスワードが14文字未満 → --shortフラグ使用"
            
            # ✅ 修正：標準出力・標準エラーをキャッチ + 絶対パス使用
            echo "🔄 StaticCrypt実行開始..."
            set -x
            
            # 方法1: 相対パス
            echo "🔄 方法1: 相対パス実行"
            staticrypt ai-rss-temp/dashboard.html -p "$STATICCRYPT_PASSWORD" --short -o ai-rss/index.html > staticrypt_output.log 2>&1
            STATICCRYPT_EXIT_CODE=$?
            
            echo "📄 StaticCrypt出力ログ:"
            cat staticrypt_output.log || echo "ログファイルなし"
            
            set +x
            
            if [ $STATICCRYPT_EXIT_CODE -eq 0 ]; then
              echo "✅ StaticCrypt終了コード成功"
            else
              echo "❌ StaticCrypt終了コード失敗: $STATICCRYPT_EXIT_CODE"
            fi
            
            # ファイル生成確認
            if [ ! -f ai-rss/index.html ]; then
              echo "⚠️ 方法1失敗 - 方法2を試行"
              
              # 方法2: 絶対パス
              echo "🔄 方法2: 絶対パス実行"
              INPUT_ABS=$(realpath ai-rss-temp/dashboard.html)
              OUTPUT_ABS="$(realpath ai-rss)/index.html"
              
              set -x
              staticrypt "$INPUT_ABS" -p "$STATICCRYPT_PASSWORD" --short -o "$OUTPUT_ABS" > staticrypt_output2.log 2>&1
              STATICCRYPT_EXIT_CODE2=$?
              set +x
              
              echo "📄 StaticCrypt出力ログ2:"
              cat staticrypt_output2.log || echo "ログファイル2なし"
              
              if [ $STATICCRYPT_EXIT_CODE2 -ne 0 ]; then
                echo "❌ 方法2も失敗"
              fi
            fi
            
            # ファイル生成確認（再）
            if [ ! -f ai-rss/index.html ]; then
              echo "⚠️ 両方法失敗 - 方法3を試行"
              
              # 方法3: カレントディレクトリ変更
              echo "🔄 方法3: ディレクトリ変更実行"
              cd ai-rss
              
              set -x
              staticrypt ../ai-rss-temp/dashboard.html -p "$STATICCRYPT_PASSWORD" --short -o index.html > ../staticrypt_output3.log 2>&1
              STATICCRYPT_EXIT_CODE3=$?
              set +x
              
              cd ..
              
              echo "📄 StaticCrypt出力ログ3:"
              cat staticrypt_output3.log || echo "ログファイル3なし"
              
              if [ $STATICCRYPT_EXIT_CODE3 -ne 0 ]; then
                echo "❌ 方法3も失敗"
              fi
            fi
            
          else
            echo "✅ パスワード長推奨値 → 通常実行"
            
            set -x
            staticrypt ai-rss-temp/dashboard.html -p "$STATICCRYPT_PASSWORD" -o ai-rss/index.html > staticrypt_output.log 2>&1
            STATICCRYPT_EXIT_CODE=$?
            set +x
            
            echo "📄 StaticCrypt出力ログ:"
            cat staticrypt_output.log || echo "ログファイルなし"
            
            if [ $STATICCRYPT_EXIT_CODE -ne 0 ]; then
              echo "❌ StaticCrypt実行失敗 (終了コード: $STATICCRYPT_EXIT_CODE)"
              exit 1
            fi
          fi
          
          # 最終結果検証
          echo "🔍 最終結果検証:"
          echo "📁 ai-rss/ 全体内容:"
          ls -la ai-rss/
          
          if [ -f ai-rss/index.html ]; then
            FILE_SIZE=$(wc -c < ai-rss/index.html)
            echo "✅ 暗号化ファイル生成成功 ($FILE_SIZE bytes)"
            
            if [ $FILE_SIZE -gt 1000 ]; then
              echo "✅ ファイルサイズ適切"
              echo "📄 ファイル先頭確認:"
              head -c 200 ai-rss/index.html
              echo ""
            else
              echo "❌ ファイルサイズ異常 ($FILE_SIZE bytes)"
              echo "📄 ファイル内容全体:"
              cat ai-rss/index.html
              exit 1
            fi
          else
            echo "❌ 全ての方法で暗号化ファイル生成失敗"
            echo "🔍 最終診断:"
            echo "📁 全ディレクトリ構造:"
            find . -name "*.html" -o -name "*.log" | sort
            echo "📁 権限情報:"
            ls -la . | grep ai-rss
            echo "📄 StaticCryptヘルプ:"
            staticrypt --help || echo "ヘルプ取得失敗"
            exit 1
          fi
        else
          echo "❌ 入力ファイル不存在"
          exit 1
        fi
      env:
        STATICCRYPT_PASSWORD: ${{ secrets.STATICCRYPT_PASSWORD }}
