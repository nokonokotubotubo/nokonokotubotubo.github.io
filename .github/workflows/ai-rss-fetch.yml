name: AI RSS Feed Processing with Debug

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  ai-rss-processing:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    # 📊 実行環境の詳細確認
    - name: Debug - Environment check
      run: |
        echo "🔍 実行環境確認:"
        echo "PWD: $(pwd)"
        echo "HOME: $HOME"
        echo "USER: $USER"
        echo "📁 ディレクトリ構造:"
        ls -la
        echo "📁 リポジトリファイル:"
        find . -type f -name "*.js" -o -name "*.json" | head -20
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install rss-parser
        
    # 📊 プロジェクトファイル確認
    - name: Debug - Project files check
      run: |
        echo "📋 プロジェクトファイル確認:"
        echo "src/ exists: $([ -d src ] && echo 'YES' || echo 'NO')"
        echo "config/ exists: $([ -d config ] && echo 'YES' || echo 'NO')"
        if [ -d src ]; then
          echo "📄 src/ contents:"
          ls -la src/
        fi
        if [ -d config ]; then
          echo "📄 config/ contents:"
          ls -la config/
        fi
        
    - name: Create output directories
      run: |
        mkdir -p ai-rss-temp/data
        mkdir -p ai-rss
        echo "📁 出力ディレクトリ作成完了"
        ls -la ai-rss-temp/
        
    - name: Process RSS feeds
      run: |
        echo "🚀 RSS処理開始 - PWD: $(pwd)"
        node src/ai-rss-processor.js
        echo "📄 RSS処理後のファイル確認:"
        ls -la ai-rss-temp/data/ || echo "ai-rss-temp/data/ が存在しません"
        
    - name: Analyze articles with AI
      run: |
        echo "🤖 AI分析開始 - PWD: $(pwd)"
        node src/ai-analyzer.js
        echo "📄 AI分析後のファイル確認:"
        ls -la ai-rss-temp/data/ || echo "ai-rss-temp/data/ が存在しません"
        
    - name: Generate HTML dashboard
      run: |
        echo "🎨 HTML生成開始 - PWD: $(pwd)"
        node src/ai-data-generator.js
        echo "📄 HTML生成後のファイル確認:"
        ls -la ai-rss-temp/ || echo "ai-rss-temp/ が存在しません"
        if [ -f ai-rss-temp/dashboard.html ]; then
          echo "✅ dashboard.html 生成成功 ($(wc -c < ai-rss-temp/dashboard.html) bytes)"
        else
          echo "❌ dashboard.html 生成失敗"
        fi
        
    # 📊 暗号化前の最終確認
    - name: Debug - Pre-encryption check
      run: |
        echo "🔍 暗号化前ファイル確認:"
        echo "📁 全体構造:"
        find . -name "*.html" -o -name "*.json" | grep -E "(ai-rss|dashboard)" || echo "関連ファイルが見つかりません"
        echo "📊 ディスク使用量:"
        du -sh ai-rss-temp/ ai-rss/ 2>/dev/null || echo "ディレクトリが存在しません"
        
    - name: Encrypt with StaticCrypt
      run: |
        if [ -f ai-rss-temp/dashboard.html ]; then
          echo "🔒 StaticCrypt暗号化開始"
          npm install -g staticrypt
          staticrypt ai-rss-temp/dashboard.html -p "${{ secrets.STATICCRYPT_PASSWORD }}" -o ai-rss/index.html
          echo "✅ 暗号化完了"
          ls -la ai-rss/
        else
          echo "❌ dashboard.html が存在しないため暗号化をスキップ"
          exit 1
        fi
      env:
        STATICCRYPT_PASSWORD: ${{ secrets.STATICCRYPT_PASSWORD }}
        
    # 📊 デプロイ前の最終確認
    - name: Debug - Pre-deploy check
      run: |
        echo "🚀 デプロイ前最終確認:"
        if [ -f ai-rss/index.html ]; then
          echo "✅ index.html exists ($(wc -c < ai-rss/index.html) bytes)"
          echo "📄 ai-rss/ contents:"
          ls -la ai-rss/
        else
          echo "❌ index.html が存在しません"
          echo "📁 現在のディレクトリ構造:"
          find . -type f | grep -v node_modules | sort
          exit 1
        fi
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./ai-rss
        force_orphan: true
        enable_jekyll: false
        
    - name: Deployment complete
      run: |
        echo "🎉 AI RSS Dashboard deployed successfully!"
        echo "🔗 Access: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
