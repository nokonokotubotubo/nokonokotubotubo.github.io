name: AI RSS Feed Processing

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  ai-rss-processing:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install rss-parser
        
    - name: Create output directories
      run: |
        mkdir -p ai-rss-temp/data
        mkdir -p ai-rss
        
    - name: Process RSS feeds
      run: node src/ai-rss-processor.js
        
    - name: Analyze articles with AI
      run: node src/ai-analyzer.js
        
    - name: Generate HTML dashboard
      run: |
        node src/ai-data-generator.js
        if [ -f ai-rss-temp/dashboard.html ]; then
          echo "HTML generated: $(wc -c < ai-rss-temp/dashboard.html) bytes"
        else
          echo "HTML generation failed"
          exit 1
        fi
        
    # ✅ 修正：StaticCrypt詳細診断版
    - name: Encrypt with StaticCrypt (Detailed Debug)
      run: |
        if [ -f ai-rss-temp/dashboard.html ]; then
          echo "🔒 StaticCrypt暗号化開始（詳細診断版）"
          
          # StaticCryptインストール
          npm install -g staticrypt
          
          # 環境確認
          echo "📦 StaticCrypt version: $(staticrypt --version)"
          echo "📦 Node.js version: $(node --version)"
          echo "📦 npm version: $(npm --version)"
          
          # パスワード確認
          PASSWORD_LENGTH=${#STATICCRYPT_PASSWORD}
          echo "🔑 Password length: $PASSWORD_LENGTH characters"
          
          # ファイル詳細確認
          echo "📄 Input file details:"
          ls -la ai-rss-temp/dashboard.html
          echo "📊 Input file size: $(wc -c < ai-rss-temp/dashboard.html) bytes"
          echo "📝 Input file first 100 chars:"
          head -c 100 ai-rss-temp/dashboard.html
          echo ""
          
          # 出力ディレクトリ確認
          echo "📁 Output directory before:"
          ls -la ai-rss/
          echo "🔍 Output directory permissions:"
          ls -ld ai-rss/
          
          # 作業ディレクトリ確認
          echo "📍 Working directory: $(pwd)"
          echo "📍 Full paths:"
          echo "  Input:  $(realpath ai-rss-temp/dashboard.html)"
          echo "  Output: $(realpath ai-rss/)"
          
          # StaticCrypt実行前テスト
          echo "🧪 StaticCrypt command test:"
          staticrypt --help | head -5
          
          # パスワード長による実行
          if [ $PASSWORD_LENGTH -lt 8 ]; then
            echo "❌ Error: Password must be 8+ characters"
            exit 1
          elif [ $PASSWORD_LENGTH -lt 14 ]; then
            echo "⚠️ Using --short flag for password under 14 chars"
            
            # 詳細実行ログ付きStaticCrypt
            echo "🔄 StaticCrypt execution with detailed logging:"
            echo "Command: staticrypt ai-rss-temp/dashboard.html -p [HIDDEN] --short -o ai-rss/index.html"
            
            # 実行 + 標準出力・標準エラーをキャッチ
            set -x  # コマンドトレース開始
            staticrypt ai-rss-temp/dashboard.html -p "$STATICCRYPT_PASSWORD" --short -o ai-rss/index.html 2>&1 | tee staticrypt_full_log.txt
            STATICCRYPT_EXIT_CODE=${PIPESTATUS[0]}
            set +x  # コマンドトレース終了
            
            echo "📊 StaticCrypt exit code: $STATICCRYPT_EXIT_CODE"
            
            # 実行ログ表示
            echo "📄 StaticCrypt full output:"
            cat staticrypt_full_log.txt || echo "No log file created"
            
          else
            echo "✅ Using normal execution for 14+ char password"
            
            set -x
            staticrypt ai-rss-temp/dashboard.html -p "$STATICCRYPT_PASSWORD" -o ai-rss/index.html 2>&1 | tee staticrypt_full_log.txt
            STATICCRYPT_EXIT_CODE=${PIPESTATUS[0]}
            set +x
            
            echo "📊 StaticCrypt exit code: $STATICCRYPT_EXIT_CODE"
            echo "📄 StaticCrypt full output:"
            cat staticrypt_full_log.txt || echo "No log file created"
          fi
          
          # 実行後詳細確認
          echo "🔍 Post-execution analysis:"
          echo "📁 Output directory after:"
          ls -la ai-rss/
          
          # ファイル生成確認
          if [ -f ai-rss/index.html ]; then
            FILE_SIZE=$(wc -c < ai-rss/index.html)
            echo "✅ Encryption successful: $FILE_SIZE bytes"
            
            if [ $FILE_SIZE -gt 1000 ]; then
              echo "✅ File size appropriate"
              echo "📄 Output file first 200 chars:"
              head -c 200 ai-rss/index.html
              echo ""
            else
              echo "⚠️ File size too small: $FILE_SIZE bytes"
              echo "📄 Complete file content:"
              cat ai-rss/index.html
            fi
            
            # StaticCrypt signature check
            if grep -q "StaticCrypt" ai-rss/index.html; then
              echo "✅ StaticCrypt signature found"
            else
              echo "⚠️ StaticCrypt signature not found"
            fi
            
          else
            echo "❌ Encryption failed - file not created"
            
            # 失敗時の詳細診断
            echo "🔍 Failure analysis:"
            echo "📊 StaticCrypt exit code was: $STATICCRYPT_EXIT_CODE"
            echo "📁 Current directory contents:"
            find . -name "*.html" -o -name "*.log" -o -name "index.*" | sort
            echo "📁 ai-rss directory contents:"
            find ai-rss -type f 2>/dev/null || echo "No files in ai-rss"
            echo "📄 Any error logs:"
            find . -name "*error*" -o -name "*log*" | head -5
            
            # 権限チェック
            echo "🔍 Permission check:"
            touch ai-rss/test_write.tmp && echo "✅ Write permission OK" || echo "❌ Write permission failed"
            rm -f ai-rss/test_write.tmp
            
            # 手動作成テスト
            echo "🧪 Manual file creation test:"
            echo "Test content" > ai-rss/manual_test.html && echo "✅ Manual creation OK" || echo "❌ Manual creation failed"
            ls -la ai-rss/manual_test.html 2>/dev/null || echo "Manual test file not found"
            rm -f ai-rss/manual_test.html
            
            exit 1
          fi
        else
          echo "❌ Input file not found"
          exit 1
        fi
      env:
        STATICCRYPT_PASSWORD: ${{ secrets.STATICCRYPT_PASSWORD }}
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./ai-rss
        force_orphan: true
        enable_jekyll: false
        
    - name: Deployment complete
      run: |
        echo "Dashboard deployed successfully!"
        echo "Access: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
