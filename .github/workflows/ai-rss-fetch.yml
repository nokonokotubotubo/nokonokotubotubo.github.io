name: AI RSS Feed Processing - StaticCrypt Error Fix

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  ai-rss-processing:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install rss-parser
        
    - name: Create output directories
      run: |
        mkdir -p ai-rss-temp/data
        mkdir -p ai-rss
        
    - name: Process RSS feeds
      run: node src/ai-rss-processor.js
        
    - name: Analyze articles with AI
      run: node src/ai-analyzer.js
        
    - name: Generate HTML dashboard
      run: |
        node src/ai-data-generator.js
        if [ -f ai-rss-temp/dashboard.html ]; then
          echo "✅ dashboard.html 生成成功 ($(wc -c < ai-rss-temp/dashboard.html) bytes)"
        else
          echo "❌ dashboard.html 生成失敗"
          exit 1
        fi
        
    # ✅ 修正版：StaticCrypt暗号化（エラーハンドリング強化）
    - name: Encrypt with StaticCrypt (Fixed)
      run: |
        if [ -f ai-rss-temp/dashboard.html ]; then
          echo "🔒 StaticCrypt暗号化開始"
          
          # StaticCryptインストール
          npm install -g staticrypt
          echo "📦 StaticCrypt バージョン: $(staticrypt --version)"
          
          # パスワード長チェック
          PASSWORD_LENGTH=${#STATICCRYPT_PASSWORD}
          echo "📏 パスワード長: $PASSWORD_LENGTH 文字"
          
          # 入力ファイル確認
          echo "📄 入力ファイル確認:"
          ls -la ai-rss-temp/dashboard.html
          echo "📊 入力ファイルサイズ: $(wc -c < ai-rss-temp/dashboard.html) bytes"
          
          # 出力ディレクトリ確認
          echo "📁 出力ディレクトリ確認:"
          ls -la ai-rss/
          
          # パスワード長による実行方法の選択
          if [ $PASSWORD_LENGTH -lt 8 ]; then
            echo "❌ エラー: パスワードは8文字以上である必要があります"
            exit 1
          elif [ $PASSWORD_LENGTH -lt 14 ]; then
            echo "⚠️ パスワードが14文字未満 → --shortフラグ使用"
            
            # ✅ 修正：シンプルなコマンド実行
            set -x  # コマンド実行をトレース
            staticrypt ai-rss-temp/dashboard.html -p "$STATICCRYPT_PASSWORD" --short -o ai-rss/index.html
            STATICCRYPT_EXIT_CODE=$?
            set +x
            
            if [ $STATICCRYPT_EXIT_CODE -eq 0 ]; then
              echo "✅ StaticCrypt実行成功"
            else
              echo "❌ StaticCrypt実行失敗 (終了コード: $STATICCRYPT_EXIT_CODE)"
              exit 1
            fi
          else
            echo "✅ パスワード長推奨値 → 通常実行"
            
            set -x
            staticrypt ai-rss-temp/dashboard.html -p "$STATICCRYPT_PASSWORD" -o ai-rss/index.html
            STATICCRYPT_EXIT_CODE=$?
            set +x
            
            if [ $STATICCRYPT_EXIT_CODE -eq 0 ]; then
              echo "✅ StaticCrypt実行成功"
            else
              echo "❌ StaticCrypt実行失敗 (終了コード: $STATICCRYPT_EXIT_CODE)"
              exit 1
            fi
          fi
          
          # 結果検証
          echo "🔍 結果検証:"
          if [ -f ai-rss/index.html ]; then
            FILE_SIZE=$(wc -c < ai-rss/index.html)
            echo "✅ 暗号化ファイル生成成功 ($FILE_SIZE bytes)"
            
            if [ $FILE_SIZE -gt 1000 ]; then
              echo "✅ ファイルサイズ適切"
              echo "📄 ファイル先頭確認:"
              head -c 150 ai-rss/index.html
              echo ""
            else
              echo "❌ ファイルサイズ異常 ($FILE_SIZE bytes)"
              echo "📄 ファイル内容全体:"
              cat ai-rss/index.html
              exit 1
            fi
          else
            echo "❌ 暗号化ファイル生成失敗"
            echo "📁 ai-rss/ 内容:"
            ls -la ai-rss/
            exit 1
          fi
        else
          echo "❌ 入力ファイル不存在"
          exit 1
        fi
      env:
        STATICCRYPT_PASSWORD: ${{ secrets.STATICCRYPT_PASSWORD }}
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./ai-rss
        force_orphan: true
        enable_jekyll: false
        
    - name: Deployment complete
      run: |
        echo "🎉 AI RSS Dashboard deployed successfully!"
        echo "🔗 Access: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
