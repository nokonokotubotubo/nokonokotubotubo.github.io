import React, { useState, useCallback, useMemo } from 'react';
import { createRoot } from 'react-dom/client';
import { Article, ViewMode } from './utils';
import { useArticles, useAIScoring, useRSSManager, useWordManager } from './hooks';
import './styles.css';

// RSSマネージャーモーダル
function RSSManager({ onClose }: { onClose: () => void }) {
  const [url, setUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { rssFeeds, addRSS, removeRSS, updateAllRSS } = useRSSManager();

  const handleAdd = useCallback(async () => {
    if (!url.trim()) return;
    
    setIsLoading(true);
    try {
      await addRSS(url);
      setUrl('');
      alert('RSS追加完了');
    } catch (error) {
      alert('RSS追加に失敗しました');
    } finally {
      setIsLoading(false);
    }
  }, [url, addRSS]);

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal" onClick={e => e.stopPropagation()}>
        <h2>RSS管理</h2>
        
        <div className="modal-form">
          <div className="form-group">
            <label>RSS URL</label>
            <input
              type="url"
              value={url}
              onChange={e => setUrl(e.target.value)}
              placeholder="https://example.com/rss"
            />
          </div>
          
          <div className="modal-actions">
            <button onClick={handleAdd} disabled={isLoading} className="btn">
              {isLoading ? '追加中...' : 'RSS追加'}
            </button>
            <button onClick={() => updateAllRSS()} className="btn btn-secondary">
              全更新
            </button>
            <button onClick={onClose} className="btn btn-secondary">
              閉じる
            </button>
          </div>
        </div>

        <div className="rss-list">
          <h3>登録済みRSS</h3>
          {rssFeeds.map(feed => (
            <div key={feed.id} className="word-item">
              <span>{feed.title}</span>
              <button onClick={() => removeRSS(feed.id)} className="remove-btn">
                削除
              </button>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

// ワードマネージャーモーダル
function WordManager({ onClose }: { onClose: () => void }) {
  const [interestedWord, setInterestedWord] = useState('');
  const [ngWord, setNGWord] = useState('');
  const { 
    wordFilters, 
    addInterestedWord, 
    addNGWord, 
    removeInterestedWord, 
    removeNGWord 
  } = useWordManager();

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal" onClick={e => e.stopPropagation()}>
        <h2>ワード管理</h2>
        
        <div className="modal-form">
          <div className="form-group">
            <label>気になるワード</label>
            <input
              type="text"
              value={interestedWord}
              onChange={e => setInterestedWord(e.target.value)}
              placeholder="キーワードを入力"
            />
            <button 
              onClick={() => {
                addInterestedWord(interestedWord);
                setInterestedWord('');
              }}
              className="btn"
            >
              追加
            </button>
          </div>

          <div className="word-list">
            {wordFilters.interestedWords.map((word, index) => (
              <div key={index} className="word-item">
                <span>{word}</span>
                <button onClick={() => removeInterestedWord(index)} className="remove-btn">
                  削除
                </button>
              </div>
            ))}
          </div>

          <div className="form-group">
            <label>NGワード</label>
            <input
              type="text"
              value={ngWord}
              onChange={e => setNGWord(e.target.value)}
              placeholder="除外キーワードを入力"
            />
            <button 
              onClick={() => {
                addNGWord(ngWord);
                setNGWord('');
              }}
              className="btn"
            >
              追加
            </button>
          </div>

          <div className="word-list">
            {wordFilters.ngWords.map((word, index) => (
              <div key={index} className="word-item">
                <span>{word}</span>
                <button onClick={() => removeNGWord(index)} className="remove-btn">
                  削除
                </button>
              </div>
            ))}
          </div>

          <div className="modal-actions">
            <button onClick={onClose} className="btn btn-secondary">
              閉じる
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

// 記事カードコンポーネント
function ArticleCard({ article, onToggleRead, onToggleReadLater, onRate }: {
  article: Article;
  onToggleRead: (id: string) => void;
  onToggleReadLater: (id: string) => void;
  onRate: (article: Article, rating: number) => void;
}) {
  const { getPersonalizedScore } = useAIScoring();
  const score = getPersonalizedScore(article);

  const handleClick = useCallback((e: React.MouseEvent) => {
    e.preventDefault();
    window.open(article.url, '_blank');
    onToggleRead(article.id);
  }, [article.url, article.id, onToggleRead]);

  return (
    <div className="article-card">
      <h3 className="article-title">
        <a href={article.url} onClick={handleClick}>
          {article.title}
        </a>
      </h3>
      
      <div className="article-meta">
        <span className="article-source">{article.rssSource}</span>
        <span className="article-score">スコア: {score}</span>
      </div>
      
      <p className="article-content">{article.content}</p>
      
      <div className="article-actions">
        <div className="status-controls">
          <button
            onClick={() => onToggleRead(article.id)}
            className={`status-btn ${article.readStatus === 'read' ? 'read' : ''}`}
          >
            {article.readStatus === 'read' ? '既読' : '未読'}
          </button>
          <button
            onClick={() => onToggleReadLater(article.id)}
            className={`status-btn ${article.readLater ? 'read-later' : ''}`}
          >
            {article.readLater ? '後で読む済' : '後で読む'}
          </button>
        </div>
        
        <div className="star-rating">
          {[1, 2, 3, 4, 5].map(star => (
            <span
              key={star}
              className={`star ${star <= article.userRating ? 'filled' : ''}`}
              onClick={() => onRate(article, star)}
            >
              ★
            </span>
          ))}
        </div>
      </div>
    </div>
  );
}

// メインアプリ
function App() {
  const [viewMode, setViewMode] = useState<ViewMode>('all');
  const [showModal, setShowModal] = useState<null | 'rss' | 'words'>(null);
  
  const { articles, toggleReadStatus, toggleReadLater } = useArticles();
  const { getPersonalizedScore, updateScore } = useAIScoring();
  const { wordFilters } = useWordManager();

  // フィルタリング・ソート済み記事
  const filteredArticles = useMemo(() => {
    let filtered = articles.filter(article => {
      // ビューモードフィルタ
      if (viewMode === 'unread' && article.readStatus !== 'unread') return false;
      if (viewMode === 'read' && article.readStatus !== 'read') return false;
      if (viewMode === 'readLater' && !article.readLater) return false;
      
      // NGワードフィルタ
      if (wordFilters.ngWords.some(word => 
        article.title.toLowerCase().includes(word.toLowerCase()) ||
        article.content.toLowerCase().includes(word.toLowerCase())
      )) return false;
      
      return true;
    });

    // スコア順ソート
    return filtered.sort((a, b) => getPersonalizedScore(b) - getPersonalizedScore(a));
  }, [articles, viewMode, wordFilters, getPersonalizedScore]);

  return (
    <div className="app">
      <nav className="nav">
        <h1>Mysews</h1>
        
        <div className="nav-controls">
          <div className="filter-buttons">
            {(['all', 'unread', 'read', 'readLater'] as ViewMode[]).map(mode => (
              <button
                key={mode}
                onClick={() => setViewMode(mode)}
                className={`filter-btn ${viewMode === mode ? 'active' : ''}`}
              >
                {mode === 'all' ? '全て' :
                 mode === 'unread' ? '未読' :
                 mode === 'read' ? '既読' :
                 '後で読む'}
              </button>
            ))}
          </div>
          
          <div className="action-buttons">
            <button onClick={() => setShowModal('rss')} className="btn">
              RSS管理
            </button>
            <button onClick={() => setShowModal('words')} className="btn">
              ワード管理
            </button>
          </div>
        </div>
      </nav>

      <div className="article-grid">
        {filteredArticles.map(article => (
          <ArticleCard
            key={article.id}
            article={article}
            onToggleRead={toggleReadStatus}
            onToggleReadLater={toggleReadLater}
            onRate={updateScore}
          />
        ))}
      </div>

      {showModal === 'rss' && <RSSManager onClose={() => setShowModal(null)} />}
      {showModal === 'words' && <WordManager onClose={() => setShowModal(null)} />}
    </div>
  );
}

// アプリケーション起動
const root = createRoot(document.getElementById('root')!);
root.render(<App />);
